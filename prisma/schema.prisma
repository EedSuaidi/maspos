// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  username     String        @unique
  password     String

  // Relations
  transactions Transaction[]
  carts        Cart[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("user")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  
  // Relations
  products  Product[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("category")
}

model Product {
  id         String    @id @default(uuid())
  name       String
  price      Int
  image      String

  // Relations
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  carts      Cart[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("product")
}

model Cart {
  id         String   @id @default(uuid())
  quantity   Int
  total      Int

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])

  createdAt  DateTime @default(now())

  @@map("cart")
}

model Transaction {
  id        String   @id @default(uuid())
  items     String
  total     Int
  date      DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transaction")
}
